package org.payid.cli.shell.commands;

import static org.assertj.core.api.Assertions.assertThat;

import com.google.common.collect.Sets;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSObject;
import com.nimbusds.jose.JWSVerifier;
import com.nimbusds.jose.Payload;
import com.nimbusds.jose.crypto.ECDSAVerifier;
import com.nimbusds.jose.jwk.ECKey;
import org.junit.Before;
import org.junit.Test;

import java.text.ParseException;

/**
 * Unit tests for {@link SignatureCommands} that validates this sig against the sig generated by nodeJs.
 *
 * @see "https://github.com/xpring-eng/xpring-utils"
 */
public class SignatureCommandsTestForNode {

  private static final String JS_KEY = "{"
    + "\"kid\":\"6CUODtTtfyYDTqzrjHdPdCMnWwHrRRt-P3OXik8N7Vo\","
    + "\"crv\":\"secp256k1\","
    + "\"x\":\"FHQ1pI6r-ct_s1o9TyBcTFG5H2KD-OCmTeQEvRxjpK8\","
    + "\"y\":\"deT41Y6fEhJrSyHmQg0pDNQZ9F7tn08LaYtCdb1gQzM\","
    + "\"kty\":\"EC\""
    + "}";

  private static final String JS_DETACHED_PAYLOAD =
    "{\"payId\":\"alice$payid.example\","
      + "\"payIdAddress\":{\"environment\":\"TESTNET\","
      + "\"paymentNetwork\":\"XRPL\","
      + "\"addressDetailsType\":\"CryptoAddressDetails\","
      + "\"addressDetails\":{\"address\":\"rP3t3JStqWPYd8H88WfBYh3v84qqYzbHQ6\"}}}";

  private static final String JS_JWS = "eyJuYW1lIjoiaWRlbnRpdHlLZXkiLCJhbGciOiJFUzI1NksiLCJ0eXAiOiJKT1NFK0pTT04iLCJiNjQ"
    + "iOmZhbHNlLCJjcml0IjpbImI2NCJdLCJqd2siOnsiY3J2Ijoic2VjcDI1NmsxIiwieCI6IkZIUTFwSTZyLWN0X3MxbzlUeUJjVEZHNUgyS0QtT0N"
    + "tVGVRRXZSeGpwSzgiLCJ5IjoiZGVUNDFZNmZFaEpyU3lIbVFnMHBETlFaOUY3dG4wOExhWXRDZGIxZ1F6TSIsImt0eSI6IkVDIiwia2lkIjoiNkN"
    + "VT0R0VHRmeVlEVHF6cmpIZFBkQ01uV3dIclJSdC1QM09YaWs4TjdWbyJ9fQ"
    + ".."
    + "IEGCTkcNHMLqAqUQOukz2PHwOaHgoxWW6kJtfUr_Y0qbVuusJin_FjYPRKtfaQTLyDneGYo7mzD04vPXT77_jA";

  private ECKey identityKeyFromJs;

  @Before
  public void setUp() throws ParseException {
    identityKeyFromJs = ECKey.parse(JS_KEY);
  }

  /**
   * Given a JWS that is generated from the NodeJS implementation, assert that we can verify it in Java (using the
   * provided public key).
   */
  @Test
  public void signJwsWithSingleAddress() throws JOSEException, ParseException {
    Payload detachedPayload = new Payload(JS_DETACHED_PAYLOAD);
    JWSObject jwsFromJs = JWSObject.parse(JS_JWS, detachedPayload);

    // Verify the EC signature
    JWSVerifier verifier = new ECDSAVerifier(identityKeyFromJs.toECPublicKey(), Sets.newHashSet("b64"));
    assertThat(jwsFromJs.verify(verifier)).isTrue();
  }
}
